{"version":3,"sources":["spinner.js","searchPhotos.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","usePromiseTracker","promiseInProgress","className","type","color","height","width","unsplash","Unsplash","accessKey","process","SearchPhotos","useState","query","setQuery","pics","setPics","searchPhotos","e","a","preventDefault","trackPromise","search","photos","then","toJson","json","results","length","handleShow","show","setShow","handleClose","Form","onSubmit","Row","Col","lg","sm","xs","Label","htmlFor","srOnly","Control","id","name","placeholder","value","onChange","target","Button","Container","map","pic","key","alt","alt_description","src","urls","full","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4UAKe,SAASA,IAGtB,OAF6BC,8BAAtBC,mBAGL,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAQC,KAAK,YAAYC,MAAM,UAAUC,OAAO,MAAMC,MAAM,SCKlE,IAAMC,EAAW,IAAIC,IAAS,CAC7BC,UAAWC,gDAGG,SAASC,IAAgB,IAAD,EACZC,mBAAS,IADG,mBAC/BC,EAD+B,KACxBC,EADwB,OAEdF,mBAAS,IAFK,mBAE/BG,EAF+B,KAEzBC,EAFyB,KAIhCC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACpBD,EAAEE,iBADkB,SAGZC,uBACJd,EAASe,OACVC,OAAOV,EAAO,GAAI,IAClBW,KAAKC,UACLD,MAAK,SAACE,GACNV,EAAQU,EAAKC,SAERD,EAAKC,QAAQC,QACjBC,QAXgB,2CAAH,sDAJoB,EAsBbjB,oBAAS,GAtBI,mBAsB9BkB,EAtB8B,KAsBxBC,EAtBwB,KAuB/BC,EAAc,kBAAMD,GAAQ,IAC5BF,EAAa,kBAAME,GAAQ,IAEjC,OACE,oCACE,kBAACE,EAAA,EAAD,CAAMC,SAAUjB,EAAcf,UAAU,eACzC,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvB,kBAACN,EAAA,EAAKO,MAAN,CAAYC,QAAQ,QAAQC,QAAM,IAClC,kBAACT,EAAA,EAAKU,QAAN,CACCC,GAAG,sBACHzC,KAAK,OACH0C,KAAK,QACL3C,UAAU,QACV4C,YAAY,gBACZC,MAAOlC,EACVmC,SAAU,SAAC9B,GAAD,OAAOJ,EAASI,EAAE+B,OAAOF,WAGrC,kBAACX,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACrB,kBAACW,EAAA,EAAD,CAAQ/C,KAAK,UAAb,aAKN,kBAACJ,EAAD,MACA,kBAACoD,EAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,KACEpB,EAAKqC,KAAI,SAACC,GAAD,OACP,kBAACjB,EAAA,EAAD,CAAKE,GAAI,EAAGD,GAAI,EAAGiB,IAAKD,EAAIT,IAC3B,yBACC1C,UAAU,cACVqD,IAAKF,EAAIG,gBACTC,IAAKJ,EAAIK,KAAKC,WAGd,MAIL,kBAACC,EAAA,EAAD,CAAO9B,KAAMA,EAAM+B,OAAQ7B,GACzB,kBAAC4B,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,mCAEF,kBAACJ,EAAA,EAAMK,KAAP,0DACA,kBAACL,EAAA,EAAMM,OAAP,KACE,kBAAChB,EAAA,EAAD,CAAQiB,QAAQ,YAAYC,QAASpC,GAArC,Y,MCtEKqC,MAXf,WACE,OACE,6BACE,kBAAClB,EAAA,EAAD,KACE,wBAAIjD,UAAU,SAAd,uBACA,kBAACS,EAAD,SCAY2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56f4a48c.chunk.js","sourcesContent":["import React from 'react';\n\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\nexport default function Spinner() {\n\tconst { promiseInProgress } = usePromiseTracker();\n\n  return promiseInProgress &&\n    <div className=\"spinner\">\n      <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\n    </div>  \n}","import React, { useState } from \"react\";\nimport Unsplash, { toJson } from \"unsplash-js\";\n\nimport { trackPromise } from 'react-promise-tracker';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport Modal from 'react-bootstrap/Modal';\n\nimport Spinner from \"./spinner\";\n\n\nconst unsplash = new Unsplash({\n\taccessKey: process.env.REACT_APP_API_KEY,\n});\n\nexport default function SearchPhotos() {\n\tconst [query, setQuery] = useState(\"\");\n\tconst [pics, setPics] = useState([]);\n\n\tconst searchPhotos = async (e) => {\n\t\te.preventDefault();\n\n    await trackPromise(\n      unsplash.search\n\t\t\t\t.photos(query, \"\", 20) // keyword, page, per_page\n\t\t\t\t.then(toJson)\n\t\t\t\t.then((json) => {\n\t\t\t\t\tsetPics(json.results);\n\n\t\t\t\t\tif (!json.results.length) {\n\t\t\t\t\t\thandleShow();\n\t\t\t\t\t}\n\t\t\t\t})\n    );\n\t};\n\n\t// Modal\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Form onSubmit={searchPhotos} className=\"search_form\">\n\t\t\t  <Row>\n\t\t\t    <Col lg={11} sm={11} xs={10}>\n\t\t\t      <Form.Label htmlFor=\"query\" srOnly></Form.Label>\n\t\t\t      <Form.Control \n\t\t\t      \tid=\"inlineFormInputName\"\n\t\t\t      \ttype=\"text\"\n\t\t          name=\"query\"\n\t\t          className=\"input\"\n\t\t          placeholder=\"Search photos\"\n\t\t          value={query}\n\t\t    \t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t      />\n\t\t\t    </Col>\n\t\t\t    <Col lg={1} sm={1} xs={1}>\n\t\t\t      <Button type=\"submit\">Submit</Button>\n\t\t\t    </Col>\n\t\t\t  </Row>\n\t\t\t</Form>\n\n\t\t\t<Spinner />\n\t\t\t<Container>\n  \t\t\t<Row>\n  \t\t\t\t{pics.map((pic) => \n\t      \t\t<Col sm={4} lg={3} key={pic.id}>\n\t      \t\t\t<img\n\t      \t\t\t\tclassName=\"card--image\"\n\t      \t\t\t\talt={pic.alt_description}\n\t      \t\t\t\tsrc={pic.urls.full}\n\t      \t\t\t></img>\n\t      \t\t</Col>\n\t      \t)}{\" \"}\n  \t\t\t</Row>\n  \t\t</Container>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>So sorry to say this but:</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>We used your keyword and could not find anything!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n    </>\n  );\n}","import React from 'react';\nimport './App.scss';\nimport SearchPhotos from \"./searchPhotos\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <h1 className=\"title\">Unsplash API search</h1>\n        <SearchPhotos />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}